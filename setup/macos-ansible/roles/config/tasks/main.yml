---
  - name: Make sure the '~/.config' directory exists
    file:
      path: ~/.config
      state: directory
  
  # -------------- karabiner --------------
  - name: Symlink .config/karabiner
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ karabiner_folder_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/karabiner"

  # -------------- lf --------------
  - name: Symlink .config/lf
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ lf_folder_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/lf"

  # -------------- skhd --------------
  - name: Symlink .config/skhd
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ skhd_folder_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/skhd"

  # -------------- iterm2 --------------
  - name: Symlink iterm2 plist
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ iterm2_plist_file_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/iterm2/com.googlecode.iterm2.plist"

  # -------------- yabai --------------
  - name: Symlink .config/yabai
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ yabai_folder_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/yabai"

  # -------------- vscode --------------
  - name: Ensure VsCode extensions are installed/uninstalled
    ansible.builtin.include_tasks: vscode_extensions.yml

  - name: Ensure VsCode config folder '{{ vscode_config_folder_path }}' exists (create if it does not exist).
    file:
      path: "{{ vscode_config_folder_path }}"
      state: directory

  - name: Symlink vscode/settings.json
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ vscode_settings_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/vscode/settings.json"

  - name: Symlink vscode/keybindings.json
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ vscode_keybindings_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/vscode/keybindings.json"

  # -------------- zsh --------------
  - name: Symlink .zshrc
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ zshrc_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/zsh/.zshrc"

  - name: Symlink .zprofile
    ansible.builtin.include_tasks: symlink_file.yml
    vars:
      file_path: "{{ zprofile_path }}"
      symlink_target: "{{ dotfiles_folder_relative_prefix }}/zsh/.zprofile"

  # -------------- macos preferences --------------
  - name: Set MacOs preferences
    become: true
    script: "{{ macos_preferences_script_path }}"

  # -------------- fonts --------------
  - name: Copy configured fonts
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "{{ fonts_target_folder }}"
      mode: '0644'
    loop: "{{ fonts_to_install }}"

  # -------------- nvm and node --------------
  - name: Check if .nvm folder exists
    stat:
      path: "$HOME/.nvm"
    register: folder_check

  - name: Installs nvm and then via nvm it installs node
    script: install-nvm-and-node.sh
    when: not folder_check.stat.exists

  # -------------- npm packages --------------
  - name: Ensure npm (global) packages are installed
    command: "npm install --global {{ item }}"
    loop: "{{ npm_global_packages_to_install }}"



# trash ~/.zshrc ~/.zshrc_BACKUP ~/.zprofile ~/.zprofile_BACKUP ~/.config/karabiner ~/.config/karabiner_BACKUP ~/.config/lf ~/.config/lf_BACKUP ~/.config/skhd ~/.config/skhd_BACKUP ~/.config/yabai ~/.config/yabai_BACKUP ~/Library/Application\ Support/Code/User/settings.json ~/Library/Application\ Support/Code/User/settings.json_BACKUP ~/Library/Application\ Support/Code/User/keybindings.json ~/Library/Application\ Support/Code/User/keybindings.json_BACKUP
